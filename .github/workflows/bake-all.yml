name: Build All Image in Parallel
run-name: >
  ${{
    (github.event.inputs.release_tag && format('{0} | ', github.event.inputs.release_tag)) ||
    (github.event.client_payload.release_tag && format('{0} | ', github.event.client_payload.release_tag)) ||
    ''
  }}Build by @${{ github.actor }} [${{
    (github.event_name == 'repository_dispatch' && github.event.client_payload.trigger_source) ||
    github.event_name
  }}] on ${{
    (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) ||
    (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) ||
    'ubuntu-latest'
  }}

# This workflow builds Ubuntu Rockchip images using a smart matrix system that
# deduplicates artifact builds. The matrix generator analyzes board configurations
# and only builds the unique rootfs, kernel, and u-boot artifacts needed.
#
# Boards to build can be specified:
# 1. Default: handy-hpd5kx,orangepi-5-plus,orangepi-5b,radxa-rock-5b
# 2. Workflow input: Set "boards_to_build" when running manually
# 3. Environment variable: Edit BOARDS_TO_BUILD below
# 4. Repository dispatch: Pass boards_to_build in client_payload

on:
  repository_dispatch:
    types: [event-bake-all]

  workflow_dispatch:
    inputs:
      runner:
        description: 'Specify the runner (e.g., ubuntu-latest, windows-latest, self-hosted-runner).'
        required: false
        type: choice
        default: 'ubuntu-latest'
        options:
          - ubuntu-latest
          - ubuntu-24.04
          - ubuntu-22.04
          - github-linux64-ubuntu-latest-8core  # Large GitHub-hosted runner
          - github-arm64-ubuntu-24.04-8core  # ARM64 self-hosted runner

      boards_to_build:
        description: 'Comma-separated list of boards to build (leave empty to use default)'
        required: false
        type: string
        default: ''

      build_type:
        description: 'Type of build to perform'
        required: false
        type: choice
        default: 'nightly'
        options:
          - nightly
          - release

      release_tag:
        description: 'Release tag for the image'
        required: false
        type: string
        default: ''

env:
  RECIPE_REP: 'diverger/ubuntu-rockchip'
  RECIPE_REF: ${{ github.event.client_payload.build_ref || 'diverger' }}
  RECIPE_DIR: "."

  # Define the boards to build (change this list as needed)
  BOARDS_TO_BUILD: ${{ github.event.inputs.boards_to_build || github.event.client_payload.boards_to_build || 'handy-hpd5kx-aim7' }}
  EFFECTIVE_TRIGGER_SOURCE: ${{ github.event.client_payload.trigger_source || github.event_name }}
  EFFECTIVE_BAKER_ARTIFACT_RETENTION_DAYS: 90
  EFFECTIVE_IMAGE_ARTIFACT_RETENTION_DAYS: 90
  EFFECTIVE_RELEASE_TAG: ${{ github.event.inputs.release_tag || github.event.client_payload.release_tag || '' }}
  EFFECTIVE_RUNNER: ${{ github.event.inputs.runner || github.event.client_payload.runner || 'ubuntu-latest' }}

  # OCI registry configuration - use first entry from oci_infos if provided, otherwise use defaults
  OCI_INFOS: ${{ toJson(github.event.client_payload.oci_infos) }}
  REGISTRY_TYPE: ghcr
  REGISTRY_SERVER: ghcr.io
  REGISTRY_NAMESPACE: ${{ github.repository }}
  REGISTRY_USERNAME: ${{ github.actor }}

  BUILD_TYPE: ${{ github.event.inputs.build_type || github.event.client_payload.build_type || 'nightly' }}
  CHECK_OCI: ${{ github.event.client_payload.check_oci || 'true' }}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.release_tag || github.event.client_payload.release_tag || '' }}
  cancel-in-progress: false

jobs:

  update-release:
    if: ${{ github.actor == 'diverger' && (github.event.inputs.release_tag || github.event.client_payload.release_tag) }}
    runs-on: ubuntu-latest
    name: Update Release Note
    steps:
      - name: Checkout build repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Run local build
        id: image_build_step
        uses: ./.github/actions/update-release
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          release_tag: ${{ env.EFFECTIVE_RELEASE_TAG }}
          baker_repo: ${{ github.repository }}

  matrix:
    if: ${{ always() && github.actor == 'diverger' }}
    #! The runner of 'matrix' must be the same with the buildi jobs
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) || (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) || 'ubuntu-latest' }}
    needs: [update-release, oci-config]
    name: Generate Build Matrices
    outputs:
      rootfs_matrix: ${{ steps.matrices.outputs.rootfs_matrix }}
      kernel_matrix: ${{ steps.matrices.outputs.kernel_matrix }}
      uboot_matrix: ${{ steps.matrices.outputs.uboot_matrix }}
      image_matrix: ${{ steps.matrices.outputs.image_matrix }}
    steps:
      - name: Checkout build repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Generate build matrices
        id: matrices
        env:
          BOARDS_TO_BUILD: ${{ env.BOARDS_TO_BUILD }}
          RECIPE_DIR: ${{ env.RECIPE_DIR }}
        run: |
          cd "$RECIPE_DIR"

          # Always detect OS version from runner
          eval "$(./scripts/ci/runner-infos.sh --github-export)"

          echo "ЁЯОп Building for boards: $BOARDS_TO_BUILD"
          echo "Using OS version: $os_version"

          # Capture all warnings and errors from matrix generation
          warnings_file=$(mktemp)

          echo "Generating rootfs matrix..."
          rootfs_matrix=$(scripts/ci/generate-build-matrix.sh --boards "$BOARDS_TO_BUILD" --type rootfs --output json --os-version "$os_version" --registry-url "${{ needs.oci-config.outputs.registry_server }}" --namespace "${{ needs.oci-config.outputs.registry_namespace }}" 2> >(tee -a "$warnings_file" >&2))
          echo "rootfs_matrix=$rootfs_matrix" >> $GITHUB_OUTPUT
          rootfs_count=$(echo "$rootfs_matrix" | jq '.include | length')
          echo "rootfs_count=$rootfs_count" >> $GITHUB_OUTPUT
          echo "Rootfs matrix: $rootfs_matrix"

          echo "Generating kernel matrix..."
          kernel_matrix=$(scripts/ci/generate-build-matrix.sh --boards "$BOARDS_TO_BUILD" --type kernel --output json --os-version "$os_version" --registry-url "${{ needs.oci-config.outputs.registry_server }}" --namespace "${{ needs.oci-config.outputs.registry_namespace }}" 2> >(tee -a "$warnings_file" >&2))
          echo "kernel_matrix=$kernel_matrix" >> $GITHUB_OUTPUT
          kernel_count=$(echo "$kernel_matrix" | jq '.include | length')
          echo "kernel_count=$kernel_count" >> $GITHUB_OUTPUT
          echo "Kernel matrix: $kernel_matrix"

          echo "Generating uboot matrix..."
          uboot_matrix=$(scripts/ci/generate-build-matrix.sh --boards "$BOARDS_TO_BUILD" --type uboot --output json --os-version "$os_version" --registry-url "${{ needs.oci-config.outputs.registry_server }}" --namespace "${{ needs.oci-config.outputs.registry_namespace }}" 2> >(tee -a "$warnings_file" >&2))
          echo "uboot_matrix=$uboot_matrix" >> $GITHUB_OUTPUT
          uboot_count=$(echo "$uboot_matrix" | jq '.include | length')
          echo "uboot_count=$uboot_count" >> $GITHUB_OUTPUT
          echo "Uboot matrix: $uboot_matrix"

          echo "Generating image matrix..."
          image_matrix=$(scripts/ci/generate-build-matrix.sh --boards "$BOARDS_TO_BUILD" --type image --output json --os-version "$os_version" --registry-url "${{ needs.oci-config.outputs.registry_server }}" --namespace "${{ needs.oci-config.outputs.registry_namespace }}" 2> >(tee -a "$warnings_file" >&2))
          echo "image_matrix=$image_matrix" >> $GITHUB_OUTPUT
          image_count=$(echo "$image_matrix" | jq '.include | length')
          echo "image_count=$image_count" >> $GITHUB_OUTPUT
          echo "Image matrix: $image_matrix"

          # Add warnings to step summary if any exist
          if [[ -s "$warnings_file" ]] && grep -q "тЪая╕П" "$warnings_file"; then
            echo "### тЪая╕П Matrix Generation Warnings" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            # Process warnings and remove ANSI color codes and duplicates
            grep "тЪая╕П" "$warnings_file" | \
              sed 's/\x1b\[[0-9;]*m//g' | \
              sort | uniq | \
              while IFS= read -r line; do
                echo "- $line" >> $GITHUB_STEP_SUMMARY
              done
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Clean up
          rm -f "$warnings_file"

      - name: Show matrix summary
        run: |
          echo "### ЁЯУК Build Matrix Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Matrix Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Rootfs | ${{ steps.matrices.outputs.rootfs_count || 0 }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Kernel | ${{ steps.matrices.outputs.kernel_count || 0 }} |" >> $GITHUB_STEP_SUMMARY
          echo "| U-Boot | ${{ steps.matrices.outputs.uboot_count || 0 }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Images | ${{ steps.matrices.outputs.image_count || 0 }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ЁЯе╛ U-Boot Deduplication Details" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.matrices.outputs.uboot_matrix }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### ЁЯЧГя╕П Rootfs Matrix" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.matrices.outputs.rootfs_matrix }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### ЁЯРз Kernel Matrix" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.matrices.outputs.kernel_matrix }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "### ЁЯТ┐ Image Matrix" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.matrices.outputs.image_matrix }}' | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  oci-config:
    if: ${{ github.actor == 'diverger' }}
    runs-on: ubuntu-latest
    name: Extract OCI Configuration
    outputs:
      registry_type: ${{ steps.extract.outputs.registry_type }}
      registry_server: ${{ steps.extract.outputs.registry_server }}
      registry_namespace: ${{ steps.extract.outputs.registry_namespace }}
      registry_username: ${{ steps.extract.outputs.registry_username }}
    steps:
      - name: Extract OCI configuration from payload
        id: extract
        env:
          OCI_INFOS: ${{ env.OCI_INFOS }}
        run: |
          echo "Extracting OCI configuration..."
          echo "OCI_INFOS: $OCI_INFOS"

          # Parse OCI configuration and extract first entry, or use defaults
          if [[ "$OCI_INFOS" != "null" && "$OCI_INFOS" != "" && "$OCI_INFOS" != "[]" ]]; then
            echo "Using OCI configuration from payload"
            registry_type=$(echo "$OCI_INFOS" | jq -r '.[0].type // "ghcr"')
            registry_server=$(echo "$OCI_INFOS" | jq -r '.[0].server // "ghcr.io"')
            registry_namespace=$(echo "$OCI_INFOS" | jq -r '.[0].namespace // "${{ github.repository }}"')
            registry_username=$(echo "$OCI_INFOS" | jq -r '.[0].username // "${{ github.actor }}"')
          else
            echo "Using default OCI configuration"
            registry_type="ghcr"
            registry_server="ghcr.io"
            registry_namespace="${{ github.repository }}"
            registry_username="${{ github.actor }}"
          fi

          echo "registry_type=$registry_type" >> $GITHUB_OUTPUT
          echo "registry_server=$registry_server" >> $GITHUB_OUTPUT
          echo "registry_namespace=$registry_namespace" >> $GITHUB_OUTPUT
          echo "registry_username=$registry_username" >> $GITHUB_OUTPUT

          echo "OCI Configuration:"
          echo "  Type: $registry_type"
          echo "  Server: $registry_server"
          echo "  Namespace: $registry_namespace"
          echo "  Username: $registry_username"

  rootfs:
    if: ${{ github.actor == 'diverger' }}
    needs: [matrix, oci-config]
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) || (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) || 'ubuntu-latest' }}
    name: Build rootfs
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.rootfs_matrix) }}

    steps:
      - name: Show trigger source
        run: |
          echo "Workflow triggered by: ${{ env.EFFECTIVE_TRIGGER_SOURCE }}"
          echo "Event name: ${{ github.event_name }}"

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: false

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Run local build
        id: baker_step
        uses: "./.github/actions/rootfs-baker"
        with:
          suite: ${{ matrix.suite }}
          flavor: ${{ matrix.flavor }}
          variant: ${{ matrix.variant }}
          repo_access_token: ${{ secrets.GH_ACCESS_TOKEN }}
          artifact_retention_days: ${{ format('{0}', env.EFFECTIVE_BAKER_ARTIFACT_RETENTION_DAYS) }}
          registry_upload: ${{ needs.oci-config.outputs.registry_type != 'none' }}
          registry_check: ${{ needs.oci-config.outputs.registry_type != 'none' && env.CHECK_OCI == 'true' }}
          registry_url: ${{ needs.oci-config.outputs.registry_type == 'acr' && secrets.ACR_SERVERID || needs.oci-config.outputs.registry_server }}
          registry_namespace: ${{ needs.oci-config.outputs.registry_namespace }}
          registry_username: ${{ needs.oci-config.outputs.registry_type == 'acr' && secrets.ACR_USERNAME || needs.oci-config.outputs.registry_username }}
          registry_token: ${{ needs.oci-config.outputs.registry_type == 'acr' && secrets.ACR_PASSWORD || secrets.GH_ACCESS_TOKEN }}

  kernel:
    if: ${{ github.actor == 'diverger' }}
    needs: [matrix, oci-config]
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) || (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) || 'ubuntu-latest' }}
    name: Build kernel
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.kernel_matrix) }}

    steps:
      - name: Show trigger source
        run: |
          echo "Workflow triggered by: ${{ env.EFFECTIVE_TRIGGER_SOURCE }}"
          echo "Event name: ${{ github.event_name }}"

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: false

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Run local build
        id: baker_step
        uses: "./.github/actions/kernel-baker"
        with:
          repo_access_token: ${{ secrets.GH_ACCESS_TOKEN }}
          board: ${{ matrix.representative_board }}
          artifact_retention_days: ${{ format('{0}', env.EFFECTIVE_BAKER_ARTIFACT_RETENTION_DAYS) }}
          registry_upload: ${{ needs.oci-config.outputs.registry_type != 'none' }}
          registry_check:  ${{ needs.oci-config.outputs.registry_type != 'none' && env.CHECK_OCI == 'true' }}
          registry_url: ${{ needs.oci-config.outputs.registry_type == 'acr' && secrets.ACR_SERVERID || needs.oci-config.outputs.registry_server }}
          registry_namespace: ${{ needs.oci-config.outputs.registry_namespace }}
          registry_username: ${{ needs.oci-config.outputs.registry_type == 'acr' && secrets.ACR_USERNAME || needs.oci-config.outputs.registry_username }}
          registry_token: ${{ needs.oci-config.outputs.registry_type == 'acr' && secrets.ACR_PASSWORD || secrets.GH_ACCESS_TOKEN }}

  uboot:
    if: ${{ github.actor == 'diverger' }}
    needs: [matrix, oci-config]
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) || (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) || 'ubuntu-latest' }}
    name: Build u-boot
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.uboot_matrix) }}

    steps:
      - name: Show trigger source
        run: |
          echo "Workflow triggered by: ${{ env.EFFECTIVE_TRIGGER_SOURCE }}"
          echo "Event name: ${{ github.event_name }}"

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: false

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Run local build
        id: baker_step
        uses: "./.github/actions/uboot-baker"
        with:
          board: ${{ matrix.representative_board }}
          repo_access_token: ${{ secrets.GH_ACCESS_TOKEN }}
          artifact_retention_days: ${{ format('{0}', env.EFFECTIVE_BAKER_ARTIFACT_RETENTION_DAYS) }}
          registry_upload: ${{ needs.oci-config.outputs.registry_type != 'none' }}
          registry_check:  ${{ needs.oci-config.outputs.registry_type != 'none' && env.CHECK_OCI == 'true' }}
          registry_url: ${{ needs.oci-config.outputs.registry_type == 'acr' && secrets.ACR_SERVERID || needs.oci-config.outputs.registry_server }}
          registry_namespace: ${{ needs.oci-config.outputs.registry_namespace }}
          registry_username: ${{ needs.oci-config.outputs.registry_type == 'acr' && secrets.ACR_USERNAME || needs.oci-config.outputs.registry_username }}
          registry_token: ${{ needs.oci-config.outputs.registry_type == 'acr' && secrets.ACR_PASSWORD || secrets.GH_ACCESS_TOKEN }}

  image:
    if: ${{ github.actor == 'diverger' && success() }}
    runs-on: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.runner) || (github.event_name == 'repository_dispatch' && github.event.client_payload.runner) || 'ubuntu-latest' }}
    needs: [matrix, rootfs, kernel, uboot]
    name: Build Ubuntu Rockchip Image
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.image_matrix) }}

    steps:
      - name: Show trigger source
        run: |
          echo "Workflow triggered by: ${{ env.EFFECTIVE_TRIGGER_SOURCE }}"
          echo "Event name: ${{ github.event_name }}"

      - name: Get more disk space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          swap-storage: false

      - name: Checkout private repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.RECIPE_REP }}
          ref: ${{ env.RECIPE_REF }}
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          path: ${{ env.RECIPE_DIR }}
          clean: false
          fetch-depth: 1
          lfs: true

      - name: Run local build
        id: image_build_step
        uses: ./.github/actions/image-baker
        with:
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          board: ${{ matrix.board }}
          suite: ${{ matrix.suite }}
          flavor: ${{ matrix.flavor }}
          rootfs_artifact_name: ${{ matrix.rootfs_artifact_name || '' }}
          kernel_artifact_name: ${{ matrix.kernel_artifact_name || '' }}
          u-boot_artifact_name: ${{ matrix.u-boot_artifact_name || '' }}
          release_tag: ${{ env.EFFECTIVE_RELEASE_TAG }}
          artifact_retention_days: ${{ env.EFFECTIVE_IMAGE_ARTIFACT_RETENTION_DAYS }}
          baker_repo: ${{ github.repository }}
          image_infos: ${{ toJson(matrix) }}
          build_type: ${{ env.BUILD_TYPE }}
          # OSS1 credentials
          oss1_access_key: ${{ secrets.OSS1_ACCESS_KEY }}
          oss1_secret_key: ${{ secrets.OSS1_SECRET_KEY }}
          oss1_region: ${{ secrets.OSS1_REGION }}
          oss1_bucket: ${{ secrets.OSS1_BUCKET }}
          # OSS2 credentials
          oss2_access_key: ${{ secrets.OSS2_ACCESS_KEY }}
          oss2_secret_key: ${{ secrets.OSS2_SECRET_KEY }}
          oss2_region: ${{ secrets.OSS2_REGION }}
          oss2_bucket: ${{ secrets.OSS2_BUCKET }}

      - name: Calculate expire date
        if: ${{ success() && steps.image_build_step.outcome == 'success' }}
        id: expire
        run: |
          expire_date=$(date -u -d "+${{ env.EFFECTIVE_IMAGE_ARTIFACT_RETENTION_DAYS }} days" +"%Y-%m-%d")
          echo "Expire date: $expire_date"
          echo "expire_date=$expire_date" >> $GITHUB_OUTPUT
          echo "ЁЯУЕ Artifact Expire Date: $expire_date" >> $GITHUB_STEP_SUMMARY

